# Ansible Consul external inventory script settings.

[consul]

#
# Bulk load. Load all possible data before building inventory JSON
# If true, script processes in-memory data. JSON generation reduces drastically
#
bulk_load = false

#
# restrict included nodes to those from this datacenter
#
datacenter = us-east-1

#
# url of the consul cluster to query
#
url = http://localhost:8500

#
# if true (default) unique service ID will be used as group name (+'servers_suffix' if specified),
# if false service name will be used instead (preferable).
# The service ID is set to the service name if not provided.
#
service_id = false

#
# if true inventory caching will be enabled and
# inventory will be stored in 'cache_file'.
#
cache = false

#
# absolute path to inventory cache file.
# Default: /tmp/<script_name>-inventory.json e.g /tmp/consul_io-inventory.json
#
#cache_file = /tmp/consul_io-inventory.json

#
# how long cache will be valid in seconds. Default: 0
# Other supported units are: m = minutes, h = hours, d = days, w = weeks, M = months and Y = years
# e.g cache_ttl=1440m or cache_ttl=24h or cache_ttl=1d and so on.
# Cache will be refreshed when ttl expires or if --refresh arg is used.
#
#cache_ttl = 1d

#
# suffix added to each service to create a group name e.g Service of 'redis' and
# a suffix of '_servers' will add each address to the group name 'redis_servers'
#
#servers_suffix = _servers

#
# By default, final JSON is built based on all available info in consul.
# Suffixes means that services groups will be added in addition to basic information. See servers_suffix for additional info
# There are cases when speed is preferable than having services groups
# False value will reduce script execution time drastically.
#
suffixes = true

#
# if specified then the inventory will generate domain names that will resolve
# via Consul's inbuilt DNS. 
#
domain = consul

#
# make groups from service tags. the name of the group is derived from the
# service name and the tag name e.g. a service named nginx with tags ['master', 'v1']
# will create groups nginx_master and nginx_v1
#
tags = true

#
# looks up the node name at the given path for a list of groups to which the
# node should be added.
#
kv_groups = ansible/groups

#
# looks up the node name at the given path for a json dictionary of metadata that
# should be attached as metadata for the node
#
kv_metadata = ansible/metadata

#
# looks up the health of each service and adds the node to 'up' and 'down' groups
# based on the service availability
#
# !!!! if availability is true, suffixes also must be true. !!!!
#
availability = true
available_suffix = _up
unavailable_suffix = _down
